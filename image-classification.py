# -*- coding: utf-8 -*-
"""Yehezkiel_Proyek_Akhir_ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kZBN8W_v7_X3YrODq_SD5JdfQd7bWHC3
"""

#download dataset
!wget --no-check-certificate \
  https://dicodingacademy.blob.core.windows.net/picodiploma/ml_pemula_academy/rockpaperscissors.zip \
  -O /tmp/rockpaperscissors.zip

#melakukan ekstrasi pada file zip
import zipfile, os
local_zip = '/tmp/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

#menetapkan direktori dataset yang akan digunakan ke dalam variabel
base_path = '/tmp/rockpaperscissors/rps-cv-images/'

#membuat image data generator
from keras.preprocessing.image import ImageDataGenerator

#membuat validation generator
val_generator = ImageDataGenerator(rescale = 1./255,
                                   horizontal_flip = True,
                                   vertical_flip = True,
                                   height_shift_range = .2,
                                   validation_split = 0.4, #membagi dataset menjadi 40% validation 60% training
                                   fill_mode = 'wrap',
                                   shear_range = 0.2,
                                   rotation_range = 30,)

#membuat training generator
train_generator = ImageDataGenerator(rescale = 1./255,
                                     horizontal_flip = True,
                                     vertical_flip = True,
                                     height_shift_range = .2,
                                     validation_split = 0.4, #membagi dataset menjadi 40% validation 60% training
                                     fill_mode = 'wrap',
                                     shear_range = 0.2,
                                     rotation_range = 30,)

#menyiapkan variabel untuk melatih model
train_image = train_generator.flow_from_directory(base_path,
                                                  target_size=(100, 150),
                                                  classes=['paper', 'rock', 'scissors'],
                                                  class_mode='categorical',
                                                  subset='training',
                                                  shuffle=True,
                                                  color_mode = "rgb")

val_image = val_generator.flow_from_directory(base_path,
                                              target_size=(100, 150),
                                              classes=['paper', 'rock', 'scissors'],
                                              class_mode='categorical',
                                              subset='validation',
                                              shuffle=True,
                                              color_mode = "rgb")

#membuat arsitektur CNN
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Activation, Dense, Flatten

model = tf.keras.models.Sequential([tf.keras.layers.Conv2D(32, (3, 3), activation = 'relu', input_shape = (100, 150, 3)),
                                    tf.keras.layers.MaxPooling2D(2, 2),
                                    tf.keras.layers.Conv2D(64, (3, 3), activation = 'relu'),
                                    tf.keras.layers.MaxPooling2D(2, 2),
                                    tf.keras.layers.Conv2D(128, (3, 3), activation = 'relu'),
                                    tf.keras.layers.MaxPooling2D(2, 2),
                                    tf.keras.layers.Conv2D(256, (3, 3), activation = 'relu'),
                                    tf.keras.layers.MaxPooling2D(2, 2),
                                    tf.keras.layers.Flatten(),
                                    tf.keras.layers.Dense(512, activation = 'relu'),
                                    tf.keras.layers.Dense(3, activation = 'softmax')])

model.summary()

#memanggil fungsi compile untuk meng-compile arsitektir CNN
model.compile(loss = 'categorical_crossentropy',
              optimizer = tf.optimizers.Adam(),
              metrics = ['accuracy'])

# callbacks, menghentikan training apabila sudah memenuhi akurasi yang diinginkan
#akurasi yang diharapkan >=96%
accuracy_threshold = 96e-2
class my_callbacks(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs = None):
        if logs.get('accuracy') >= accuracy_threshold:
            print('\nUntuk Epoch -', epoch, '\nAccuracy mencapai = %2.2f%%' %(logs['accuracy']*100), 'pelatihan model dihentikan.')
            self.model.stop_training = True

# melatih model yang sudah dibuat
check_training = model.fit(train_image,
                           epochs = 20,
                           validation_data = val_image,
                           validation_steps = 5,
                           verbose = 1,
                           callbacks = [my_callbacks()])

#visualisasi training model yang dilakukan untuk melihat apakah sudah sesuai dengan yang diharapkan
import numpy as np
import matplotlib.pyplot as plt

def show_final_history(check_training):
    fig, ax = plt.subplots(1, 2, figsize=(15,5))
    ax[0].set_title('loss')
    ax[0].plot(check_training.epoch, check_training.history["loss"], label="Train loss")
    ax[0].plot(check_training.epoch, check_training.history["val_loss"], label="Validation loss")
    ax[1].set_title('acc')
    ax[1].plot(check_training.epoch, check_training.history["accuracy"], label="Train acc")
    ax[1].plot(check_training.epoch, check_training.history["val_accuracy"], label="Validation acc")
    ax[0].legend()
    ax[1].legend()

show_final_history(check_training)

# Commented out IPython magic to ensure Python compatibility.
#mulai mencoba prediksi gambar
import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

uploaded = files.upload()

for fn in uploaded.keys():
  #predicting images
  path = fn
  img = image.load_img(path, target_size=(100,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images = np.vstack([x])
  classes = model.predict(images, batch_size = 32)
  pr = np.argmax(classes, axis=1)

  print(pr)
  if pr == 0:
    print('Model memprediksi ini adalah: paper')
  elif pr == 1:
    print('Model memprediksi ini adalah: rock')
  elif pr == 2:
    print('Model memprediksi ini adalah: scissors')